#!/usr/local/opt/python/bin/python2.7
"""
                      _
 _ __ ___   ___ _ __ | |_ ___  _ __
| '_ ` _ \ / _ \ '_ \| __/ _ \| '__|
| | | | | |  __/ | | | || (_) | |
|_| |_| |_|\___|_| |_|\__\___/|_|

"""


import os
import sys
import argparse
import glob
import time
from tempfile import NamedTemporaryFile as tmpfile
from mimetypes import MimeTypes
import urllib

from gevent import socket
from gevent.pywsgi import WSGIServer

index = []

# Hacky way for global conf variables
ALLOW_UPLOADS=False
UPLOAD_DIR="/tmp"
UPLOAD_LIMIT=2

# Paths and requests
####################

def expand_paths(paths, recurse=False):
    """
    expand a list of directories and files using globing to a flat list
    """
    global index
    for p in paths:
        np = os.path.abspath(p)
        if os.path.exists(np):
            if os.path.isdir(np):
                if not recurse:
                    index.extend(filter(lambda f: os.path.isfile(f),
                        glob.glob("{}/*".format(np))))
                else:
                    for r, d, f in os.walk(np):
                        index.extend(['{}{}{}'.format(r, os.sep, fl) for fl in f])

            else:
                index.append(os.path.expanduser(np))

    index = map(lambda f: os.path.relpath(f, os.getcwd()), index)

    return index

# Serve files
#############

def serve_files(env, start_response):
    if env['PATH_INFO'] == '/':
        start_response('200 OK', [('Content-Type', 'text/html')])
        yield "<pre>%s</pre>" % sys.modules[__name__].__doc__
        if ALLOW_UPLOADS:
            yield "<pre>Mode: <a href='/'>Download</a> | <a href='/upload'>Upload</a></pre>"
            yield "<pre>%s</pre>" % (40*"#")
        yield "<table> "
        yield '\n'.join([ "<tr><td>{0}</td><td><a href='{1}'>[GET]</a></td></tr>".format(f,
            urllib.quote_plus(urllib.pathname2url(f))) for f in index ])
        yield "</table>"
    elif env['PATH_INFO'] == '/upload' and ALLOW_UPLOADS:
        if env['REQUEST_METHOD'] == "POST":
            if int(env['CONTENT_LENGTH']) > UPLOAD_LIMIT * 1024 * 1024:
                start_response('401 OK', [('Content-Type', 'text/html')])
                yield "File size exceeded the limit of %d MB" % UPLOAD_LIMIT
                return
            try:
                import cgi
                uploads = cgi.FieldStorage(
                    fp=env['wsgi.input'],
                    environ=env
                )
                f = uploads['file']
                with open("{}/{}".format(UPLOAD_DIR, f.filename), 'wb') as fp:
                    fp.write(f.file.read())
                start_response('200 OK', [('Content-Type', 'text/html')])
            except Exception as e:
                start_response('500 Internal Server Error', [('Content-Type', 'text/html')])
                raise e
        else:
            start_response('200 OK', [('Content-Type', 'text/html')])
            yield "<pre>%s</pre>" % sys.modules[__name__].__doc__
            yield "<pre>Mode: <a href='/'>Download</a> | <a href='/upload'>Upload</a></pre>"
            yield "<pre>%s</pre>" % (40*"#")
            yield '<script src="https://rawgit.com/fim/dropzone/master/dist/dropzone.js"></script>'
            yield '<link rel="stylesheet" href="https://rawgit.com/fim/dropzone/master/dist/dropzone.css">'
            yield '<form action="/upload" class="dropzone"></form>'
    else:
        rfile = urllib.unquote(env['PATH_INFO'][1:])
        if rfile in index:
            mtype = MimeTypes().guess_type(rfile)
            start_response('200 OK', [('Content-Type', mtype[0])])
            with open(rfile, 'rb') as fd:
                for chunk in iter((lambda:fd.read(4096)), ''):
                    yield chunk
        else:
            start_response('404 Not Found', [('Content-Type', 'text/html')])
            yield '<h1>{} not Found</h1>'.format(rfile)

__selfpath__ = os.path.abspath(os.path.dirname(__file__))
sys.path.append(__selfpath__ + "/modules")

# This block ensures that ^C interrupts are handled quietly.
try:
    import signal

    def exithandler(signum,frame):
        signal.signal(signal.SIGINT, signal.SIG_IGN)
        signal.signal(signal.SIGTERM, signal.SIG_IGN)
        sys.exit(1)

    signal.signal(signal.SIGINT, exithandler)
    signal.signal(signal.SIGTERM, exithandler)
    if hasattr(signal, 'SIGPIPE'):
        signal.signal(signal.SIGPIPE, signal.SIG_DFL)

except KeyboardInterrupt:
        sys.exit(1)

def main(argv):
    parser = argparse.ArgumentParser(
        description = "Fileshare tool")
    parser.add_argument("-t", "--traceback", action="store_true",
        default=False, help="print traceback on exceptions [default: False]")
    parser.add_argument("-q", "--quiet", action="store_true",
        default=False, help="quiet output [default: False]")
    parser.add_argument("-v", "--verbose", action="store_true",
        default=False, help="verbose output [default: False]")
    parser.add_argument("-r", "--recursive", action="store_true",
        default=False, help="recursive sharing of directories [default: False]")
    parser.add_argument("-p", "--port", type=int,
        default=61234, help="listening port [default: 61234]")
    parser.add_argument("-U", "--upload", action="store_true",
        default=False, help="Enable uploading files [default: False]")
    parser.add_argument("-d", "--upload-dir", default="/tmp",
        help="Destination directory for file uploads [default: /tmp")
    parser.add_argument("-l", "--upload-limit", default=2,
        help="Limit in MB for file uploads [default: 2MB]")
    parser.add_argument("-b", "--bind",
        default=None, help="bind address [default: Auto]")
    parser.add_argument("--disable-colors", action="store_true", dest="color_disable",
        default=(os.name == 'nt' or not sys.stdout.isatty()),
        help="disable colors in the output of commands"
    )
    parser.add_argument("files", nargs="*",
            default=".", help="List of files/directories to serve [Default: \".\"]"
    )

    args, subargs = parser.parse_known_args(argv)

    if args.upload:
        global ALLOW_UPLOADS
        ALLOW_UPLOADS = args.upload
    if args.upload_limit:
        global UPLOAD_LIMIT
        UPLOAD_LIMIT = args.upload_limit
    if args.upload_dir:
        global UPLOAD_DIR
        UPLOAD_DIR = args.upload_dir

    try:
        expand_paths(args.files, args.recursive)

        laddr = raddr = args.bind or '0.0.0.0'

        print("Listening on {}://{}:{}".format("http",raddr, args.port))

        WSGIServer((laddr, args.port), serve_files).serve_forever()
    except SystemExit:
        sys.exit()
    except:
        import traceback
        if args.traceback:
            traceback.print_exc()
        else:
            formatted_lines = traceback.format_exc().splitlines()
            print(formatted_lines[-1])
        sys.exit(1)

if __name__ == "__main__":
    main(sys.argv[1:])
